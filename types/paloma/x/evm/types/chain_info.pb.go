// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: paloma/evm/chain_info.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ChainInfo_Status int32

const (
	ChainInfo_IN_PROPOSAL          ChainInfo_Status = 0
	ChainInfo_ACTIVE               ChainInfo_Status = 1
	ChainInfo_WAITING_FOR_EVIDENCE ChainInfo_Status = 2
)

var ChainInfo_Status_name = map[int32]string{
	0: "IN_PROPOSAL",
	1: "ACTIVE",
	2: "WAITING_FOR_EVIDENCE",
}

var ChainInfo_Status_value = map[string]int32{
	"IN_PROPOSAL":          0,
	"ACTIVE":               1,
	"WAITING_FOR_EVIDENCE": 2,
}

func (x ChainInfo_Status) String() string {
	return proto.EnumName(ChainInfo_Status_name, int32(x))
}

func (ChainInfo_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a7f8ed12fd8dc81e, []int{0, 0}
}

type ChainInfo struct {
	ChainReferenceID      string `protobuf:"bytes,1,opt,name=chainReferenceID,proto3" json:"chainReferenceID,omitempty"`
	ChainID               uint64 `protobuf:"varint,2,opt,name=chainID,proto3" json:"chainID,omitempty"`
	SmartContractUniqueID []byte `protobuf:"bytes,3,opt,name=smartContractUniqueID,proto3" json:"smartContractUniqueID,omitempty"`
	SmartContractAddr     string `protobuf:"bytes,4,opt,name=smartContractAddr,proto3" json:"smartContractAddr,omitempty"`
	// used to verify by pigeons if they are at the correct chain
	ReferenceBlockHeight          uint64           `protobuf:"varint,5,opt,name=referenceBlockHeight,proto3" json:"referenceBlockHeight,omitempty"`
	ReferenceBlockHash            string           `protobuf:"bytes,6,opt,name=referenceBlockHash,proto3" json:"referenceBlockHash,omitempty"`
	Abi                           string           `protobuf:"bytes,7,opt,name=abi,proto3" json:"abi,omitempty"`
	Bytecode                      []byte           `protobuf:"bytes,8,opt,name=bytecode,proto3" json:"bytecode,omitempty"`
	ConstructorInput              []byte           `protobuf:"bytes,9,opt,name=constructorInput,proto3" json:"constructorInput,omitempty"`
	Status                        ChainInfo_Status `protobuf:"varint,10,opt,name=status,proto3,enum=palomachain.paloma.evm.ChainInfo_Status" json:"status,omitempty"`
	SmartContractVersion          uint64           `protobuf:"varint,11,opt,name=smartContractVersion,proto3" json:"smartContractVersion,omitempty"`
	SmartContractDeployingVersion uint64           `protobuf:"varint,12,opt,name=smartContractDeployingVersion,proto3" json:"smartContractDeployingVersion,omitempty"`
}

func (m *ChainInfo) Reset()         { *m = ChainInfo{} }
func (m *ChainInfo) String() string { return proto.CompactTextString(m) }
func (*ChainInfo) ProtoMessage()    {}
func (*ChainInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7f8ed12fd8dc81e, []int{0}
}
func (m *ChainInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainInfo.Merge(m, src)
}
func (m *ChainInfo) XXX_Size() int {
	return m.Size()
}
func (m *ChainInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChainInfo proto.InternalMessageInfo

func (m *ChainInfo) GetChainReferenceID() string {
	if m != nil {
		return m.ChainReferenceID
	}
	return ""
}

func (m *ChainInfo) GetChainID() uint64 {
	if m != nil {
		return m.ChainID
	}
	return 0
}

func (m *ChainInfo) GetSmartContractUniqueID() []byte {
	if m != nil {
		return m.SmartContractUniqueID
	}
	return nil
}

func (m *ChainInfo) GetSmartContractAddr() string {
	if m != nil {
		return m.SmartContractAddr
	}
	return ""
}

func (m *ChainInfo) GetReferenceBlockHeight() uint64 {
	if m != nil {
		return m.ReferenceBlockHeight
	}
	return 0
}

func (m *ChainInfo) GetReferenceBlockHash() string {
	if m != nil {
		return m.ReferenceBlockHash
	}
	return ""
}

func (m *ChainInfo) GetAbi() string {
	if m != nil {
		return m.Abi
	}
	return ""
}

func (m *ChainInfo) GetBytecode() []byte {
	if m != nil {
		return m.Bytecode
	}
	return nil
}

func (m *ChainInfo) GetConstructorInput() []byte {
	if m != nil {
		return m.ConstructorInput
	}
	return nil
}

func (m *ChainInfo) GetStatus() ChainInfo_Status {
	if m != nil {
		return m.Status
	}
	return ChainInfo_IN_PROPOSAL
}

func (m *ChainInfo) GetSmartContractVersion() uint64 {
	if m != nil {
		return m.SmartContractVersion
	}
	return 0
}

func (m *ChainInfo) GetSmartContractDeployingVersion() uint64 {
	if m != nil {
		return m.SmartContractDeployingVersion
	}
	return 0
}

type SmartContract struct {
	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AbiJSON  string `protobuf:"bytes,2,opt,name=abiJSON,proto3" json:"abiJSON,omitempty"`
	Bytecode []byte `protobuf:"bytes,3,opt,name=bytecode,proto3" json:"bytecode,omitempty"`
	UniqueID []byte `protobuf:"bytes,4,opt,name=uniqueID,proto3" json:"uniqueID,omitempty"`
	Address  string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *SmartContract) Reset()         { *m = SmartContract{} }
func (m *SmartContract) String() string { return proto.CompactTextString(m) }
func (*SmartContract) ProtoMessage()    {}
func (*SmartContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7f8ed12fd8dc81e, []int{1}
}
func (m *SmartContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SmartContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SmartContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SmartContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmartContract.Merge(m, src)
}
func (m *SmartContract) XXX_Size() int {
	return m.Size()
}
func (m *SmartContract) XXX_DiscardUnknown() {
	xxx_messageInfo_SmartContract.DiscardUnknown(m)
}

var xxx_messageInfo_SmartContract proto.InternalMessageInfo

func (m *SmartContract) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SmartContract) GetAbiJSON() string {
	if m != nil {
		return m.AbiJSON
	}
	return ""
}

func (m *SmartContract) GetBytecode() []byte {
	if m != nil {
		return m.Bytecode
	}
	return nil
}

func (m *SmartContract) GetUniqueID() []byte {
	if m != nil {
		return m.UniqueID
	}
	return nil
}

func (m *SmartContract) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterEnum("palomachain.paloma.evm.ChainInfo_Status", ChainInfo_Status_name, ChainInfo_Status_value)
	proto.RegisterType((*ChainInfo)(nil), "palomachain.paloma.evm.ChainInfo")
	proto.RegisterType((*SmartContract)(nil), "palomachain.paloma.evm.SmartContract")
}

func init() { proto.RegisterFile("paloma/evm/chain_info.proto", fileDescriptor_a7f8ed12fd8dc81e) }

var fileDescriptor_a7f8ed12fd8dc81e = []byte{
	// 497 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xce, 0xa6, 0x21, 0x4d, 0xa6, 0xa5, 0x84, 0x55, 0x41, 0xab, 0x22, 0xac, 0x28, 0xa7, 0x80,
	0x90, 0x23, 0x15, 0xee, 0x90, 0xda, 0x01, 0x8c, 0x50, 0x52, 0x39, 0x25, 0x48, 0x5c, 0x22, 0xff,
	0x6c, 0x92, 0x15, 0xf1, 0xae, 0x59, 0xaf, 0x2b, 0xf2, 0x0c, 0x5c, 0x78, 0x2c, 0x8e, 0x3d, 0x72,
	0x44, 0xc9, 0x0b, 0xf0, 0x08, 0xc8, 0xeb, 0xba, 0x6a, 0x1a, 0x8b, 0xdb, 0xcc, 0xf7, 0xcd, 0xef,
	0xce, 0xb7, 0xf0, 0x24, 0xf6, 0x96, 0x22, 0xf2, 0x7a, 0xf4, 0x32, 0xea, 0x05, 0x0b, 0x8f, 0xf1,
	0x29, 0xe3, 0x33, 0x61, 0xc6, 0x52, 0x28, 0x81, 0x1f, 0xe7, 0xa4, 0xc6, 0xcd, 0xdc, 0x36, 0xe9,
	0x65, 0xd4, 0xf9, 0x5b, 0x83, 0xa6, 0x95, 0x81, 0x0e, 0x9f, 0x09, 0xfc, 0x1c, 0x5a, 0x3a, 0xc2,
	0xa5, 0x33, 0x2a, 0x29, 0x0f, 0xa8, 0x63, 0x13, 0xd4, 0x46, 0xdd, 0xa6, 0xbb, 0x83, 0x63, 0x02,
	0xfb, 0x1a, 0x73, 0x6c, 0x52, 0x6d, 0xa3, 0x6e, 0xcd, 0x2d, 0x5c, 0xfc, 0x0a, 0x1e, 0x25, 0x91,
	0x27, 0x95, 0x25, 0xb8, 0x92, 0x5e, 0xa0, 0x3e, 0x71, 0xf6, 0x2d, 0xcd, 0x4a, 0xed, 0xb5, 0x51,
	0xf7, 0xd0, 0x2d, 0x27, 0xf1, 0x0b, 0x78, 0xb8, 0x45, 0xf4, 0xc3, 0x50, 0x92, 0x9a, 0x6e, 0xbe,
	0x4b, 0xe0, 0x53, 0x38, 0x96, 0xc5, 0x30, 0x67, 0x4b, 0x11, 0x7c, 0x7d, 0x4f, 0xd9, 0x7c, 0xa1,
	0xc8, 0x3d, 0x3d, 0x4a, 0x29, 0x87, 0x4d, 0xc0, 0x77, 0x70, 0x2f, 0x59, 0x90, 0xba, 0x6e, 0x51,
	0xc2, 0xe0, 0x16, 0xec, 0x79, 0x3e, 0x23, 0xfb, 0x3a, 0x20, 0x33, 0xf1, 0x09, 0x34, 0xfc, 0x95,
	0xa2, 0x81, 0x08, 0x29, 0x69, 0xe8, 0x65, 0x6e, 0x7c, 0xfd, 0x76, 0x82, 0x27, 0x4a, 0xa6, 0x81,
	0x12, 0xd2, 0xe1, 0x71, 0xaa, 0x48, 0x53, 0xc7, 0xec, 0xe0, 0xf8, 0x0d, 0xd4, 0x13, 0xe5, 0xa9,
	0x34, 0x21, 0xd0, 0x46, 0xdd, 0xa3, 0xd3, 0xae, 0x59, 0x7e, 0x1e, 0xf3, 0xe6, 0x34, 0xe6, 0x58,
	0xc7, 0xbb, 0xd7, 0x79, 0xd9, 0xfe, 0x5b, 0x8f, 0x32, 0xa1, 0x32, 0x61, 0x82, 0x93, 0x83, 0x7c,
	0xff, 0x32, 0x0e, 0xdb, 0xf0, 0x74, 0x0b, 0xb7, 0x69, 0xbc, 0x14, 0x2b, 0xc6, 0xe7, 0x45, 0xf2,
	0xa1, 0x4e, 0xfe, 0x7f, 0x50, 0xe7, 0x35, 0xd4, 0xf3, 0x59, 0xf0, 0x03, 0x38, 0x70, 0x86, 0xd3,
	0x73, 0x77, 0x74, 0x3e, 0x1a, 0xf7, 0x3f, 0xb6, 0x2a, 0x18, 0xa0, 0xde, 0xb7, 0x2e, 0x9c, 0xc9,
	0xa0, 0x85, 0x30, 0x81, 0xe3, 0xcf, 0x7d, 0xe7, 0xc2, 0x19, 0xbe, 0x9b, 0xbe, 0x1d, 0xb9, 0xd3,
	0xc1, 0xc4, 0xb1, 0x07, 0x43, 0x6b, 0xd0, 0xaa, 0x76, 0x7e, 0x20, 0xb8, 0x3f, 0xbe, 0xdd, 0x02,
	0x1f, 0x41, 0x95, 0x85, 0x5a, 0x68, 0x35, 0xb7, 0xca, 0xc2, 0x4c, 0x5a, 0x9e, 0xcf, 0x3e, 0x8c,
	0x47, 0x43, 0x2d, 0xad, 0xa6, 0x5b, 0xb8, 0x5b, 0x07, 0xd8, 0xbb, 0x73, 0x80, 0x13, 0x68, 0xa4,
	0x85, 0xd2, 0x6a, 0x39, 0x57, 0xf8, 0xba, 0x62, 0x18, 0x4a, 0x9a, 0x24, 0x5a, 0x21, 0x59, 0xc5,
	0xdc, 0x3d, 0xb3, 0x7e, 0xad, 0x0d, 0x74, 0xb5, 0x36, 0xd0, 0x9f, 0xb5, 0x81, 0x7e, 0x6e, 0x8c,
	0xca, 0xd5, 0xc6, 0xa8, 0xfc, 0xde, 0x18, 0x95, 0x2f, 0xcf, 0xe6, 0x4c, 0x2d, 0x52, 0xdf, 0x0c,
	0x44, 0xd4, 0xbb, 0x75, 0x9e, 0x6b, 0xbb, 0xf7, 0x5d, 0x7f, 0x34, 0xb5, 0x8a, 0x69, 0xe2, 0xd7,
	0xf5, 0x27, 0x7b, 0xf9, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x30, 0xd9, 0x47, 0x83, 0x03, 0x00,
	0x00,
}

func (m *ChainInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SmartContractDeployingVersion != 0 {
		i = encodeVarintChainInfo(dAtA, i, uint64(m.SmartContractDeployingVersion))
		i--
		dAtA[i] = 0x60
	}
	if m.SmartContractVersion != 0 {
		i = encodeVarintChainInfo(dAtA, i, uint64(m.SmartContractVersion))
		i--
		dAtA[i] = 0x58
	}
	if m.Status != 0 {
		i = encodeVarintChainInfo(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x50
	}
	if len(m.ConstructorInput) > 0 {
		i -= len(m.ConstructorInput)
		copy(dAtA[i:], m.ConstructorInput)
		i = encodeVarintChainInfo(dAtA, i, uint64(len(m.ConstructorInput)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Bytecode) > 0 {
		i -= len(m.Bytecode)
		copy(dAtA[i:], m.Bytecode)
		i = encodeVarintChainInfo(dAtA, i, uint64(len(m.Bytecode)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Abi) > 0 {
		i -= len(m.Abi)
		copy(dAtA[i:], m.Abi)
		i = encodeVarintChainInfo(dAtA, i, uint64(len(m.Abi)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ReferenceBlockHash) > 0 {
		i -= len(m.ReferenceBlockHash)
		copy(dAtA[i:], m.ReferenceBlockHash)
		i = encodeVarintChainInfo(dAtA, i, uint64(len(m.ReferenceBlockHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.ReferenceBlockHeight != 0 {
		i = encodeVarintChainInfo(dAtA, i, uint64(m.ReferenceBlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.SmartContractAddr) > 0 {
		i -= len(m.SmartContractAddr)
		copy(dAtA[i:], m.SmartContractAddr)
		i = encodeVarintChainInfo(dAtA, i, uint64(len(m.SmartContractAddr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SmartContractUniqueID) > 0 {
		i -= len(m.SmartContractUniqueID)
		copy(dAtA[i:], m.SmartContractUniqueID)
		i = encodeVarintChainInfo(dAtA, i, uint64(len(m.SmartContractUniqueID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainID != 0 {
		i = encodeVarintChainInfo(dAtA, i, uint64(m.ChainID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainReferenceID) > 0 {
		i -= len(m.ChainReferenceID)
		copy(dAtA[i:], m.ChainReferenceID)
		i = encodeVarintChainInfo(dAtA, i, uint64(len(m.ChainReferenceID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SmartContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SmartContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmartContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintChainInfo(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.UniqueID) > 0 {
		i -= len(m.UniqueID)
		copy(dAtA[i:], m.UniqueID)
		i = encodeVarintChainInfo(dAtA, i, uint64(len(m.UniqueID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Bytecode) > 0 {
		i -= len(m.Bytecode)
		copy(dAtA[i:], m.Bytecode)
		i = encodeVarintChainInfo(dAtA, i, uint64(len(m.Bytecode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AbiJSON) > 0 {
		i -= len(m.AbiJSON)
		copy(dAtA[i:], m.AbiJSON)
		i = encodeVarintChainInfo(dAtA, i, uint64(len(m.AbiJSON)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintChainInfo(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintChainInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovChainInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChainInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainReferenceID)
	if l > 0 {
		n += 1 + l + sovChainInfo(uint64(l))
	}
	if m.ChainID != 0 {
		n += 1 + sovChainInfo(uint64(m.ChainID))
	}
	l = len(m.SmartContractUniqueID)
	if l > 0 {
		n += 1 + l + sovChainInfo(uint64(l))
	}
	l = len(m.SmartContractAddr)
	if l > 0 {
		n += 1 + l + sovChainInfo(uint64(l))
	}
	if m.ReferenceBlockHeight != 0 {
		n += 1 + sovChainInfo(uint64(m.ReferenceBlockHeight))
	}
	l = len(m.ReferenceBlockHash)
	if l > 0 {
		n += 1 + l + sovChainInfo(uint64(l))
	}
	l = len(m.Abi)
	if l > 0 {
		n += 1 + l + sovChainInfo(uint64(l))
	}
	l = len(m.Bytecode)
	if l > 0 {
		n += 1 + l + sovChainInfo(uint64(l))
	}
	l = len(m.ConstructorInput)
	if l > 0 {
		n += 1 + l + sovChainInfo(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovChainInfo(uint64(m.Status))
	}
	if m.SmartContractVersion != 0 {
		n += 1 + sovChainInfo(uint64(m.SmartContractVersion))
	}
	if m.SmartContractDeployingVersion != 0 {
		n += 1 + sovChainInfo(uint64(m.SmartContractDeployingVersion))
	}
	return n
}

func (m *SmartContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovChainInfo(uint64(m.Id))
	}
	l = len(m.AbiJSON)
	if l > 0 {
		n += 1 + l + sovChainInfo(uint64(l))
	}
	l = len(m.Bytecode)
	if l > 0 {
		n += 1 + l + sovChainInfo(uint64(l))
	}
	l = len(m.UniqueID)
	if l > 0 {
		n += 1 + l + sovChainInfo(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovChainInfo(uint64(l))
	}
	return n
}

func sovChainInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChainInfo(x uint64) (n int) {
	return sovChainInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChainInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainReferenceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainReferenceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			m.ChainID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmartContractUniqueID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChainInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChainInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SmartContractUniqueID = append(m.SmartContractUniqueID[:0], dAtA[iNdEx:postIndex]...)
			if m.SmartContractUniqueID == nil {
				m.SmartContractUniqueID = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmartContractAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SmartContractAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceBlockHeight", wireType)
			}
			m.ReferenceBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReferenceBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceBlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReferenceBlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Abi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Abi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytecode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChainInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChainInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytecode = append(m.Bytecode[:0], dAtA[iNdEx:postIndex]...)
			if m.Bytecode == nil {
				m.Bytecode = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConstructorInput", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChainInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChainInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConstructorInput = append(m.ConstructorInput[:0], dAtA[iNdEx:postIndex]...)
			if m.ConstructorInput == nil {
				m.ConstructorInput = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ChainInfo_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmartContractVersion", wireType)
			}
			m.SmartContractVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SmartContractVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmartContractDeployingVersion", wireType)
			}
			m.SmartContractDeployingVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SmartContractDeployingVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChainInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChainInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SmartContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SmartContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SmartContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbiJSON", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AbiJSON = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytecode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChainInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChainInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytecode = append(m.Bytecode[:0], dAtA[iNdEx:postIndex]...)
			if m.Bytecode == nil {
				m.Bytecode = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChainInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChainInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueID = append(m.UniqueID[:0], dAtA[iNdEx:postIndex]...)
			if m.UniqueID == nil {
				m.UniqueID = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChainInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChainInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChainInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChainInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChainInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChainInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChainInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChainInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChainInfo = fmt.Errorf("proto: unexpected end of group")
)
